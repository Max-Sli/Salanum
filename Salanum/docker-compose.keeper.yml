version: '3.8'

services:
  # Основной сервер Salanum
  salanum-server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: salanum-main
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/salanum
      - KEEPER_OFFLINE_PORT=3001
    volumes:
      - ./server/logs:/app/logs
      - ./server/data:/app/data
    depends_on:
      - mongodb
      - keeper-offline
    networks:
      - salanum-network
    restart: unless-stopped

  # Оффлайн сервер Хранителя (изолированный)
  keeper-offline:
    build:
      context: ./server
      dockerfile: Dockerfile.keeper
    container_name: keeper-offline
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - KEEPER_MODE=offline
      - KEEPER_ISOLATION=true
    volumes:
      - ./server/logs:/app/logs:ro
      - ./server/data:/app/data:rw
    networks:
      - keeper-isolated
    restart: unless-stopped
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    # Безопасность
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: salanum-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secure_password_123
      - MONGO_INITDB_DATABASE=salanum
    volumes:
      - mongodb_data:/data/db
      - ./server/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - salanum-network
    restart: unless-stopped

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: salanum-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass secure_redis_password_123
    volumes:
      - redis_data:/data
    networks:
      - salanum-network
    restart: unless-stopped

  # Nginx для балансировки нагрузки
  nginx:
    image: nginx:alpine
    container_name: salanum-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - salanum-server
    networks:
      - salanum-network
    restart: unless-stopped

  # Мониторинг
  prometheus:
    image: prom/prometheus:latest
    container_name: salanum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - salanum-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: salanum-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - salanum-network
    restart: unless-stopped

networks:
  salanum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  keeper-isolated:
    driver: bridge
    internal: true  # Изолированная сеть без доступа в интернет
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
